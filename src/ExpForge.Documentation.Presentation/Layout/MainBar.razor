@inject NavigationManager Navigation
@using System.Reflection;
<MudDrawer @bind-Open="Open"
           Variant="DrawerVariant.Responsive"
           Elevation="3"
           Fixed="true"
           Anchor="Anchor.Left"
           Class="pa-4 glass-drawer">

    <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2" style="color:white">
        <MudImage Src="img/icon.png" Height="50" Width="50"></MudImage> ExpForge
    </MudText>

    <MudNavMenu>
        @foreach (var item in MenuItems)
        {
            if (item.Children?.Any() == true)
            {
                <MudNavGroup Title="@item.Title" Icon="@item.Icon">
                    @foreach (var sub in item.Children)
                    {
                        if (sub.Children?.Any() == true)
                        {
                            <MudNavGroup class="icon-white" Title="@sub.Title" Icon="@sub.Icon">
                                @foreach (var cmd in sub.Children)
                                {
                                    <MudNavLink Href="@cmd.Path" Icon="@cmd.Icon" Match="NavLinkMatch.Prefix">
                                        @cmd.Title
                                    </MudNavLink>
                                }
                            </MudNavGroup>
                        }
                        else
                        {
                            <MudNavLink Href="@sub.Path" Icon="@sub.Icon" Match="NavLinkMatch.Prefix">
                                @sub.Title
                            </MudNavLink>
                        }
                    }
                </MudNavGroup>
            }
            else
            {
                <MudNavLink Href="@item.Path" Icon="@item.Icon" Match="NavLinkMatch.All">
                    @item.Title
                </MudNavLink>
            }
        }

    </MudNavMenu>
</MudDrawer>

<style>

    .mud-nav-link .mud-icon-root,
    .mud-nav-group .mud-icon-root {
        color: white !important;
    }

    .glass-drawer {
        width: 250px !important;
        background: url('./img/background.png') no-repeat center center fixed;
        background-size: cover;
        color: #E4E4E4;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        box-shadow: inset 0 0 0 1000px rgba(31, 40, 51, 0.6);
    }

    .mud-nav-group {
        text-align: center;
        text-transform: none;
    }

    .mud-nav-link {
        color: #E4E4E4 !important;
        text-transform: none;
        transition: all 0.3s ease;
    }

        .mud-nav-link:hover {
            background-color: rgba(69, 162, 158, 0.2) !important;
        }

        .mud-nav-link.active {
            background-color: rgba(69, 162, 158, 0.4) !important;
            font-weight: bold;
            color: white !important;
        }
</style>

@code {
    [Parameter] public bool Open { get; set; }
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    private List<MenuItem> MenuItems = new(); // só inicializa vazio aqui

    protected override void OnInitialized()
    {
        MenuItems = new List<MenuItem>
        {
            new MenuItem("Home", "/", Icons.Material.Filled.Home),

            new MenuItem("Docs", null, Icons.Material.Filled.MenuBook)
            {
                Children = new List<MenuItem>
                {
                    new MenuItem("Getting Started", "/Docs/Getting-Started", Icons.Material.Filled.PlayArrow),
                    new MenuItem("Commands", null, Icons.Material.Filled.Terminal)
                    {
                        Children = GetCommandPages()
                    }
                }
            }
        };
    }

    public class MenuItem
    {
        public string Title { get; set; } = string.Empty;
        public string? Path { get; set; }
        public string Icon { get; set; } = Icons.Material.Filled.Circle;
        public List<MenuItem>? Children { get; set; }

        public MenuItem(string title, string? path, string icon)
        {
            Title = title;
            Path = path;
            Icon = icon;
        }
    }




    private List<MenuItem> GetCommandPages()
    {
        var list = new List<MenuItem>();

        var assembly = Assembly.GetExecutingAssembly();
        var resources = assembly.GetManifestResourceNames()
                                .Where(r => r.Contains("Pages.Docs.Commands") && r.EndsWith(".razor"));

        foreach (var res in resources)
        {
            var parts = res.Split('.');
            var name = parts[^2];
            list.Add(new MenuItem(name, $"/Docs/Commands/{name}", Icons.Material.Filled.LinearScale));
        }

        return list;
    }

}
