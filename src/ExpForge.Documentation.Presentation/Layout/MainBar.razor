@inject NavigationManager Navigation
@using System.Reflection;
@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components;

<MudDrawer @bind-Open="Open"
           Variant="DrawerVariant.Responsive"
           Elevation="3"
           Fixed="true"
           Anchor="Anchor.Left"
           Class="pa-4 glass-drawer">

    <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2" style="color:white">
        <MudImage Src="img/icon.png" Height="50" Width="50"></MudImage> ExpForge
    </MudText>

    <MudNavMenu>
        @RenderMenu(MenuItems)
    </MudNavMenu>


    <div class="drawer-footer mt-auto text-center">
        <MudText Typo="Typo.caption" Class="version-text">
            Version: @ProjectVersion
        </MudText>
    </div>
</MudDrawer>
<style>
    .mud-nav-link .mud-icon-root,
    .mud-nav-group .mud-icon-root {
        color: white !important;
    }

    .glass-drawer {
        width: 250px !important;
        background: url('./img/background.png') no-repeat center center fixed;
        background-size: cover;
        color: #E4E4E4;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        box-shadow: inset 0 0 0 1000px rgba(31, 40, 51, 0.6);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .mud-nav-group {
        text-align: center;
        text-transform: none;
    }

    .mud-drawer-header button svg,
    .mud-drawer-header .mud-icon-root {
        color: white !important;
    }

    .mud-nav-link {
        color: #E4E4E4 !important;
        text-transform: none;
        transition: all 0.3s ease;
    }

        .mud-nav-link:hover {
            background-color: rgba(69, 162, 158, 0.2) !important;
        }

        .mud-nav-link.active {
            background-color: rgba(69, 162, 158, 0.4) !important;
            font-weight: bold;
            color: white !important;
        }

    .drawer-footer {
        padding: 10px 0;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .version-text {
        color: white;
        font-size: 0.8rem;
    }
</style>

@code {
    [Parameter] public bool Open { get; set; }
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    private List<MenuItem> MenuItems = new(); 
    private string ProjectVersion = "1.0.0";
    private RenderFragment RenderMenu(List<MenuItem> items) => builder =>
    {
        int seq = 0;
        foreach (var item in items)
        {
            if (item.Children?.Any() == true)
            {
                builder.OpenComponent<MudNavGroup>(seq++);
                builder.AddAttribute(seq++, "Title", item.Title);
                builder.AddAttribute(seq++, "Icon", item.Icon);
                builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(childBuilder =>
                {
                    childBuilder.AddContent(seq++, RenderMenu(item.Children!));
                }));
                builder.CloseComponent();
            }
            else
            {
                builder.OpenComponent<MudNavLink>(seq++);
                builder.AddAttribute(seq++, "Href", item.Path);
                builder.AddAttribute(seq++, "Icon", item.Icon);
                builder.AddAttribute(seq++, "Match", NavLinkMatch.Prefix);
                builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(childBuilder =>
                {
                    childBuilder.AddContent(seq++, item.Title);
                }));
                builder.CloseComponent();
            }
        }
    };


    protected override void OnInitialized()
    {
        var version = Assembly.GetExecutingAssembly().GetName().Version;
        ProjectVersion = version != null ? $"{version.Major}.{version.Minor}.{version.Build}" : "1.0.0";


        MenuItems = new List<MenuItem>
        {
            new MenuItem("Home", "./Home", Icons.Material.Filled.Home),
            new MenuItem("Getting Started", "./Docs/Getting-Started", Icons.Material.Filled.PlayArrow),
            new MenuItem("Docs", null, Icons.Material.Filled.MenuBook)
            {
                Children = new List<MenuItem>
                {
                    new MenuItem("Commands", null, Icons.Material.Filled.Terminal)
                    {
                        Children = GetCommandPages()
                    }
                }
            },
            new MenuItem("About", "./About/", Icons.Material.Filled.Info)
        };
    }

    public class MenuItem
    {
        public string Title { get; set; } = string.Empty;
        public string? Path { get; set; }
        public string Icon { get; set; } = Icons.Material.Filled.Circle;
        public List<MenuItem>? Children { get; set; }

        public MenuItem(string title, string? path, string icon)
        {
            Title = title;
            Path = path;
            Icon = icon;
        }
    }





    private List<MenuItem> GetCommandPages(string baseNamespace = "ExpForge.Documentation.Presentation.Pages.Docs.Commands", string basePath = "./Docs/Commands")
    {
        var assembly = Assembly.GetExecutingAssembly();
        var types = assembly.GetTypes()
            .Where(t => t.Namespace != null && t.Namespace.Contains(baseNamespace) && typeof(ComponentBase).IsAssignableFrom(t))
            .ToList();

        var rootNodes = new List<MenuItem>();
        var folderMap = new Dictionary<string, MenuItem>(StringComparer.OrdinalIgnoreCase);

        foreach (var type in types)
        {
            // tenta pegar rota (RouteAttribute)
            string? route = null;
            var routeAttr = type.GetCustomAttributes().FirstOrDefault(a => a.GetType().Name == "RouteAttribute");
            if (routeAttr != null)
            {
                var templateProp = routeAttr.GetType().GetProperty("Template") ?? routeAttr.GetType().GetProperty("template");
                if (templateProp != null)
                    route = templateProp.GetValue(routeAttr) as string;
            }


            // monta estrutura de pastas a partir do namespace após baseNamespace
            var suffix = type.Namespace!.Length > baseNamespace.Length
                ? type.Namespace.Substring(baseNamespace.Length).Trim('.')
                : string.Empty;

            var folderParts = string.IsNullOrEmpty(suffix)
                ? Array.Empty<string>()
                : suffix.Split('.', StringSplitOptions.RemoveEmptyEntries);

            string folderPath = "";
            MenuItem? parent = null;

            foreach (var folderName in folderParts)
            {
                folderPath = string.IsNullOrEmpty(folderPath) ? folderName : $"{folderPath}/{folderName}";

                if (!folderMap.TryGetValue(folderPath, out var currentFolder))
                {
                    currentFolder = new MenuItem(ToFriendlyTitle(folderName), null, Icons.Material.Filled.Folder)
                    {
                        Children = new List<MenuItem>()
                    };
                    folderMap[folderPath] = currentFolder;

                    if (parent == null)
                        rootNodes.Add(currentFolder);
                    else
                    {
                        parent.Children ??= new List<MenuItem>();
                        parent.Children.Add(currentFolder);
                    }
                }

                parent = currentFolder;
            }

            // cria item da página
            var title = ToFriendlyTitle(type.Name);
            var hrefFinal = route != null ? $"./{route.TrimStart('/')}" : "./";
            var fileItem = new MenuItem(title, hrefFinal, Icons.Material.Filled.Description);

            if (parent != null)
                parent.Children!.Add(fileItem);
            else
                rootNodes.Add(fileItem);
        }

        // ordena recursivamente
        void SortRecursively(List<MenuItem> nodes)
        {
            nodes.Sort((a, b) => string.Compare(a.Title, b.Title, StringComparison.OrdinalIgnoreCase));
            foreach (var n in nodes)
                if (n.Children != null)
                    SortRecursively(n.Children);
        }
        SortRecursively(rootNodes);

        return rootNodes;
    }

    private static string ToFriendlyTitle(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;
        // separa PascalCase / camelCase / underscores / hyphens
        var spaced = Regex.Replace(input, "([a-z])([A-Z])", "$1 $2");
        spaced = spaced.Replace("_", " ").Replace("-", " ");
        // tira o sufixo "Page" ou "Index" se quiser (opcional)
        spaced = Regex.Replace(spaced, "\\b(Page|Index)\\b", "", RegexOptions.IgnoreCase).Trim();
        return Regex.Replace(spaced, @"\s+", " ").Trim();
    }



}
