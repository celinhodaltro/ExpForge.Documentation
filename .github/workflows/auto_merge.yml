name: Build and Auto Merge Documentation PRs

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write

env:
  CSPROJ_PATH: ./src/ExpForge.Documentation.Presentation/ExpForge.Documentation.Presentation.csproj

jobs:
  build:
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'documentation')
    outputs:
      new-version: ${{ steps.version-check.outputs.new_version }}
      tag-name: ${{ steps.version-check.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - run: dotnet restore

      - id: publish
        run: |
          dotnet publish -c Release -o release
          echo "publish_dir=release/wwwroot" >> $GITHUB_OUTPUT

      - run: sed -i 's|<base href="/" />|<base href="/ExpForge.Documentation/" />|' release/wwwroot/index.html

      - name: Check version difference
        id: version-check
        run: |
          set -e
          CURRENT_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" "${{ env.CSPROJ_PATH }}")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          LAST_TAG=$(git tag --list "v*" | sort -V | tail -n1)
          [ -z "$LAST_TAG" ] && LAST_VERSION="0.0.0" || LAST_VERSION="${LAST_TAG#v}"

          if [ "$CURRENT_VERSION" != "$LAST_VERSION" ]; then
            echo "new_version=true" >> $GITHUB_OUTPUT
            echo "tag_name=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "new_version=false" >> $GITHUB_OUTPUT
            echo "tag_name=" >> $GITHUB_OUTPUT
          fi

  auto-merge:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success' && contains(github.head_ref, 'documentation') 
    steps:
      - uses: actions/checkout@v3
      - name: Merge PR
        uses: pascalgn/automerge-action@v0.16.4
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

