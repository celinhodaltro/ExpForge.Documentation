name: Build, Deploy and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  pull-requests: write

env:
  CSPROJ_PATH: ./src/ExpForge.Documentation.Presentation/ExpForge.Documentation.Presentation.csproj

jobs:
  # =========================
  # 1Ô∏è‚É£ Build (sempre roda)
  # =========================
  build:
    runs-on: ubuntu-latest
    outputs:
      publish-path: ${{ steps.publish.outputs.publish_dir }}
      new-version: ${{ steps.version-check.outputs.new_version }}
      current-version: ${{ steps.version-check.outputs.current_version }}
      tag-name: ${{ steps.version-check.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - run: dotnet restore

      # Build m√≠nimo para status de PRs
      - run: dotnet build --no-restore -c Release

      - id: publish
        run: |
          dotnet publish -c Release -o release
          echo "publish_dir=release/wwwroot" >> $GITHUB_OUTPUT

      - run: sed -i 's|<base href="/" />|<base href="/ExpForge.Documentation/" />|' release/wwwroot/index.html

      - name: Check version difference
        id: version-check
        run: |
            set -e
            CURRENT_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" "${{ env.CSPROJ_PATH }}")
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

            LAST_TAG=$(git tag --list "v*" | sort -V | tail -n1)
            [ -z "$LAST_TAG" ] && LAST_VERSION="0.0.0" || LAST_VERSION="${LAST_TAG#v}"

            if [ "$CURRENT_VERSION" != "$LAST_VERSION" ]; then
                echo "new_version=true" >> $GITHUB_OUTPUT
                echo "tag_name=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
                echo "new_version=false" >> $GITHUB_OUTPUT
                echo "tag_name=" >> $GITHUB_OUTPUT
            fi



      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: blazor-release
          path: ${{ steps.publish.outputs.publish_dir }}


  # =========================
  # üîç DEBUG JOB - Para ver as condi√ß√µes
  # =========================
  debug-conditions:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Show all conditions
        run: |
          echo "üîç Checking deploy conditions:"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref == 'refs/heads/master': ${{ github.ref == 'refs/heads/master' }}"
          echo "needs.build.outputs.new-version: '${{ needs.build.outputs.new-version }}'"
          echo "needs.build.outputs.new-version == 'true': ${{ needs.build.outputs.new-version == 'true' }}"
          echo "Combined condition: ${{ github.ref == 'refs/heads/master' && needs.build.outputs.new-version == 'true' }}"


  # =========================
  # 2Ô∏è‚É£ Auto-Merge de PRs de documenta√ß√£o
  # =========================
  auto-merge:
    runs-on: ubuntu-latest
    needs: build
    if: github.actor == github.repository_owner && startsWith(github.head_ref, 'documentation')
    steps:
      - name: Debug info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"

      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: gh auth setup-git
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Merge PR automatically
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --admin --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  # =========================
  # 3Ô∏è‚É£ Deploy (apenas master e nova vers√£o)
  # =========================
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && needs.build.outputs.new-version == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: blazor-release
          path: release/wwwroot

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: release/wwwroot

  # =========================
  # 4Ô∏è‚É£ Release GitHub (apenas master e nova vers√£o)
  # =========================
  release:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ github.ref == 'refs/heads/master' && needs.build.outputs.new-version == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.build.outputs.tag-name }}
          release_name: Release ${{ needs.build.outputs.tag-name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
