name: Build and Deploy

on:
  push:
    branches:
      - master

permissions:
  contents: write

env:
  CSPROJ_PATH: ./src/ExpForge.Documentation.Presentation/ExpForge.Documentation.Presentation.csproj

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      publish-path: ${{ steps.publish.outputs.publish_dir }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - run: dotnet restore 

      - id: publish
        run: |
          dotnet publish -c Release -o release
          echo "publish_dir=release/wwwroot" >> $GITHUB_OUTPUT

      - run: sed -i 's|<base href="/" />|<base href="/ExpForge.Documentation/" />|' release/wwwroot/index.html

  check-version:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      new-version: ${{ steps.check.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check version
        id: check
        run: |
          # Pega versão do csproj
          CURRENT_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" ${{ env.CSPROJ_PATH }})
          echo "Current version: $CURRENT_VERSION"

          # Pega última tag ou define 0.0.0 se não houver
          PUBLISHED_VERSION=$(git tag --list "v*" | sort -V | tail -n1)
          if [ -z "$PUBLISHED_VERSION" ]; then
            PUBLISHED_VERSION="0.0.0"
          fi
          echo "Published version: $PUBLISHED_VERSION"

          # Compara versões
          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ]; then
            echo "No new version detected."
            echo "new_version=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected."
            echo "new_version=true" >> $GITHUB_OUTPUT


  deploy:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ needs.check-version.outputs.new-version == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ${{ needs.build.outputs.publish-path }}

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.check-version.outputs.new-version == 'true' }}
    steps:
      - name: Get version from csproj
        id: get-version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" ${{ env.CSPROJ_PATH }})
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
